
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.TransferHandler;
import javax.swing.UIManager;


public class InterfazAna extends javax.swing.JFrame {

    /**
     * Creates new form InterfazAna
     */
    List<File> files;
    static String path1;
    static String path2;
    public InterfazAna() {
        initComponents();
        modifyLabel(dropFileOne);
        modifyLabel2(dropFileOne2);
    }
    
    public void modifyLabel(JLabel container){
        String pt = "";
        TransferHandler th;
        th = new TransferHandler(){
            String pt2 = "";
            @Override
            public boolean canImport(JComponent jc, DataFlavor[] dfs) {
                return true; 
            }
            @Override
            public boolean importData(JComponent jc, Transferable t) {
                try{
                    files = (List<File>) t.getTransferData(DataFlavor.javaFileListFlavor);
                    for(File file: files){                          
                        path1 = file.getAbsolutePath();
                    }
                    JOptionPane.showMessageDialog(null, "ARCHIVO CIFRADO CARGADO");
                }
                catch(UnsupportedFlavorException | IOException ex){
                    Logger.getLogger(InterfazAna.class.getName()).log(Level.SEVERE,null,ex);
                }
                
                return true;
            }
            
        };
        container.setTransferHandler(th);
    }
    
    public void modifyLabel2(JLabel container){
        TransferHandler th;
        th = new TransferHandler(){
            @Override
            public boolean canImport(JComponent jc, DataFlavor[] dfs) {
                return true; 
            }
            @Override
            public boolean importData(JComponent jc, Transferable t) {
                try{
                    files = (List<File>) t.getTransferData(DataFlavor.javaFileListFlavor);
                    for(File file: files){                          
                        path2 = file.getAbsolutePath();
                    }
                    JOptionPane.showMessageDialog(null, "ARCHIVO ORIGINAL CARGADO");
                }
                catch(UnsupportedFlavorException | IOException ex){
                    Logger.getLogger(InterfazAna.class.getName()).log(Level.SEVERE,null,ex);
                }
                
                return true;
            }
            
        };
        container.setTransferHandler(th);
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dropFileOne2 = new javax.swing.JLabel();
        dropFileOne = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        porcentaje = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        original = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        cifrado = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Analisis de Frecuencia");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(dropFileOne2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 410, 210, 170));
        getContentPane().add(dropFileOne, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 210, 170));

        jButton2.setBorder(null);
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setFocusable(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 30, 60, 60));

        jButton1.setBorder(null);
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setFocusable(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 30, 200, 60));

        porcentaje.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        porcentaje.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(porcentaje, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 460, 130, 60));

        jScrollPane2.setBorder(null);

        original.setColumns(20);
        original.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        original.setLineWrap(true);
        original.setRows(5);
        jScrollPane2.setViewportView(original);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 420, 420, 140));

        jScrollPane1.setBorder(null);

        cifrado.setColumns(20);
        cifrado.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        cifrado.setLineWrap(true);
        cifrado.setRows(5);
        jScrollPane1.setViewportView(cifrado);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 180, 590, 140));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/disen.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(path1 == "" || path2 == ""){
            JOptionPane.showMessageDialog(null, "ARCHIVO NO CARGADOS");
        }else{
            try {
                estructuraCifrado textoDescifrado; 
                String txtcifrado = extraerTexto(path1);
                String txtoriginal = extraerTexto(path2);
                //System.out.println(txtcifrado);
                //System.out.println(txtcifrado.length());
                //System.out.println(txtoriginal.length());
               textoDescifrado = descifrarTexto( txtcifrado ,txtoriginal );

           /*System.out.print(
                "\n"+textoDescifrado.txt + "\n" +
                "Porcentaje: " + textoDescifrado.porciento
            );*/
           cifrado.setText(textoDescifrado.txt);
           original.setText(txtoriginal);
            DecimalFormat df = new DecimalFormat("#.00");
            String resultado = df.format(textoDescifrado.porciento);
            porcentaje.setText(resultado+"%");
                
            } catch (IOException ex) {
                Logger.getLogger(InterfazAna.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        path1 = "";
        path2 = "";
        cifrado.setText("");
        original.setText("");
        porcentaje.setText("%");
           
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
         try{
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch(Exception e){
            System.out.println(e);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazAna().setVisible(true);
            }
        });
        
    }
    
    public static String extraerTexto(String archivo) throws FileNotFoundException, IOException {
      String texto = "";
      String txt = "";
      FileReader f = new FileReader(archivo);
        try (BufferedReader b = new BufferedReader(f)) {
            while((texto= b.readLine())!=null) {
                txt = txt + texto;
            } }
      return txt;
    }
    
    public static estructuraCifrado descifrarTexto(String textPrueba,String textOriginal){
        Map<Character,Integer> myMap1 = new HashMap<Character,Integer>();
        
        for(int i = 0; i < 255; i++){
            myMap1.put((char)i,0);
        }
        
        int longitudTexto = textPrueba.length();

        for(int i = 0; i < longitudTexto;i++){
            for(int j = 0; j < 255; j++){
                if(textPrueba.charAt(i) == (char)j ){
                    int n = myMap1.get((char)j);
                    myMap1.put((char)j, n + 1);
                    break;
                }
            }
            //System.out.print(textPrueba.charAt(i) + " ");
        }

        for(int i = 0; i < 255;i++){
            if(myMap1.get((char)i) == 0){
                myMap1.remove((char)i);
            }            
        }
        
        List<Entry<Character, Integer>> list = new ArrayList<>(myMap1.entrySet());
		list.sort(Entry.comparingByValue());
		//list.forEach(System.out::println);
        int lenlista = list.size();

        char [] frecuencia = {' ','a','e','o','s','r','n','i','l','d','u','t','c','m','p','b','.',',','q','v','g','h','y','f','j','z',';','\u00b1','x',':','k','w'};
        char [] frecuencia2 = {' ','a','e','r','i','o','n','c','t','l','s','d','m','u','p','b','h','g','f','\u00b3','z','i','q','j','a','\u00b1','e','y','x','u','u','k','w','i'};
        char [] frecuencia3 = {' ','a','e','o','l','s','n','d','u','r','m','t','c','p','i','y','h','b','q','g','f','j','z','.',',','\u00b3','x',':','k','w'};
        char [] frecuencia4 = {' ','a','r','e','o','i','n','c','t','s','l','d','u','m','p','g','b','v','f','h','j','z','q','y','.',',','\u00b1','x','k','w','.'};
        char [] frecuencia5 = {' ','e','a','o','n','s','r','i','l','t','u','d','c','m','b','p','q','.','v','y','g','h','j','n','z','f','x','k','w',',','.','.','.'};
        char [] frecuencia6 = {' ','e','a','o','n','s','r','i','c','t','u','d','l','m','p','b','g','q','y','v','h','f','z','j','n','x','w','k','.','.','.','.'};
        char [] frecuencia7 = {' ','e','o','a','n','s','r','i','c','t','u','d','l','m','p','b','g','q','y','v','h','f','z','j','n','x','w','k','.','.','.'};
        char [] frecuencia8 = {' ','e','o','a','n','s','r','i','l','t','u','d','c','m','b','p','q','.','v','y','g','h','j','n','z','f','x','k','w',',','.','.','.'};
        char [] frecuencia9 = {' ','e','a','o','l','s','n','d','r','u','i','t','c','p','m','y','q','b','h','g','f','b','j','.','x','k','w','.','.','.','.'};
        char [] frecuencia10 = {' ','e','a','o','l','s','n','d','r','u','i','t','c','p','m','y','q','b','h','g','f','v','j','.','n','z','x','k','w','.','.','.','.'};

        List<Character> characters = new ArrayList<Character>();

        for(int i = lenlista -1 ; i > 0; i--){
            characters.add(list.get(i).getKey());
        }
        /*for(int i = 0; i < characters.size(); i++){
            System.out.println(characters.get(i));
        }*/

        estructuraCifrado txtM = new estructuraCifrado();
        estructuraCifrado txtMm = new estructuraCifrado();

        txtM = descifradoFrecuencia(textPrueba,textOriginal,frecuencia,longitudTexto,characters);        
        txtMm = descifradoFrecuencia(textPrueba,textOriginal,frecuencia2,longitudTexto,characters);
        if(txtM.porciento < txtMm.porciento)
            txtM = txtMm;
        txtMm = descifradoFrecuencia(textPrueba,textOriginal,frecuencia3,longitudTexto,characters);
        if(txtM.porciento < txtMm.porciento)
            txtM = txtMm;
        txtMm = descifradoFrecuencia(textPrueba,textOriginal,frecuencia4,longitudTexto,characters);
        if(txtM.porciento < txtMm.porciento)
            txtM = txtMm;
        txtMm = descifradoFrecuencia(textPrueba,textOriginal,frecuencia6,longitudTexto,characters);
        if(txtM.porciento < txtMm.porciento)
            txtM = txtMm;
        txtMm = descifradoFrecuencia(textPrueba,textOriginal,frecuencia5,longitudTexto,characters);        
        if(txtM.porciento < txtMm.porciento)
        txtM = txtMm;
        txtMm = descifradoFrecuencia(textPrueba,textOriginal,frecuencia7,longitudTexto,characters);        
        if(txtM.porciento < txtMm.porciento)
        txtM = txtMm;
        txtMm = descifradoFrecuencia(textPrueba,textOriginal,frecuencia8,longitudTexto,characters);        
        if(txtM.porciento < txtMm.porciento)
        txtM = txtMm;
        txtMm = descifradoFrecuencia(textPrueba,textOriginal,frecuencia9,longitudTexto,characters);        
        if(txtM.porciento < txtMm.porciento)
        txtM = txtMm;
        txtMm = descifradoFrecuencia(textPrueba,textOriginal,frecuencia10,longitudTexto,characters);        
        if(txtM.porciento < txtMm.porciento)
            txtM = txtMm;

        return txtM;
        //Imprimir todos los caracteres
        /*for (int i = 0; i < 255; i++) {
            System.out.println((char)i + " : " + myMap1.get((char)i));
        }*/
    }
    
    public static estructuraCifrado descifradoFrecuencia(String textPrueba,String textOriginal,char[] frecuencia, int longitudTexto,List<Character> characters){
        estructuraCifrado retornar = new estructuraCifrado();
        String textDescifrado = "";
        for(int i = 0; i < longitudTexto; i++){
            for(int j = 0; j < characters.size(); j++){
                if(characters.get(j)==textPrueba.charAt(i)){
                    textDescifrado = textDescifrado+frecuencia[j];
                }
            }   
        }
        //System.out.println(textDescifrado);
        int contador = 0;
        for(int i =0; i < textDescifrado.length();i++){
            if(textDescifrado.charAt(i) == textOriginal.charAt(i)){
                contador++;
               // System.out.println(textDescifrado.charAt(i)+"="+textPrueba.charAt(i) + " i:"+ i);            
            }
        }
        //System.out.println("Similitud Palabras: " + contador + " Total: " +textPrueba.length() + " Igualdad: " + + "%");
        retornar.porciento = (float)((contador*100)/textPrueba.length());
        retornar.txt = textDescifrado;
        return retornar;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextArea cifrado;
    public javax.swing.JLabel dropFileOne;
    public javax.swing.JLabel dropFileOne2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTextArea original;
    public javax.swing.JLabel porcentaje;
    // End of variables declaration//GEN-END:variables
}

class estructuraCifrado{
    public String txt;
    public float porciento;
    estructuraCifrado(){
        txt = "";
        porciento = 0.0f;
    }
}
